 في حالة لم يتغير البنك 

amount => 2000 => 2500
providerFees => 10 => 12
providerRevenue => 20 => 20
balanceBefore => 10000
balanceAfter => 12000
profit = 10;

trausrey => 60

bankAccount => 12000



totalAmount = 2500;
totalAmountdeffreance = 2500 - 2000 = 500;
newbankAccountAmount = bankAccountAmount + totalAmountdeffreance = 12500;
balanceAfter = newbankAccountAmount;
calcProfit = providerRevenue - providerFees => 20 - 12 = 8;
newProfit = calcProfit - profit => 8 - 10 = -2;
trausrey = trausrey.amount + newProfit => 60 + -2 = 58






oldBankAccount = balanceBefore;
newbankAccount = newbankAccount.balance + amountTotal
balanceBefore = newbankAccount.balance
balanceAfter = balance + amountTotal











Role => superAdmin - admin - agent
links => name - ..etc
pages => name - linkId ..etc
rolePages => linksId - roleId
pageClaims => name - linksId => users => users.view - users.create - users.update - users.delete
roleAccessControl => pageClaims - roleId




const express = require('express');
const app = express();

const cors = require('cors');
const morgan = require('morgan');
const cookieParser = require('cookie-parser');
const dotenv = require('dotenv');
dotenv.config();

const errorHandler = require('./middlewares/errorHandler.js');
const ApiError = require('./utils/apiError.js');
const sequelize = require('./config/database.js');

const routes = require('./routes/index.js');


const corsOptions = {
  origin: process.env.CLIENT_URL,
  credentials: true,
  allowedHeaders: ['Content-Type', 'Authorization'],
  methods: ['GET', 'POST', 'PUT', 'DELETE'],
};

app.use(express.json());
app.use(express.urlencoded({ extended: true }));
app.use(cookieParser());
app.use('/api/uploads', express.static('uploads'));
app.use(cors(corsOptions));
app.use(morgan('tiny'));

User.belongsTo(Role);
Role.hasMany(User);

BankAccount.belongsTo(Bank);
Bank.hasMany(BankAccount);

Transaction.belongsTo(BankAccount);
BankAccount.hasMany(Transaction);

Transaction.belongsTo(User, {
  foreignKey: 'createdBy',
  as: 'creator',
});

User.hasMany(Transaction, {
  foreignKey: 'createdBy',
  as: 'transactions',
});

Transfer.belongsTo(BankAccount, {
  foreignKey: 'senderId',
  as: 'sender',
});

Transfer.belongsTo(BankAccount, {
  foreignKey: 'recipientId',
  as: 'recipient',
});

Transfer.belongsTo(User, {
  foreignKey: 'createdBy',
  as: 'creator',
});

Category.belongsTo(User, {
  foreignKey: 'createdBy',
  as: 'creator',
});

Segment.belongsTo(Category, {
  foreignKey: 'serviceId',
  as: 'service',
});

Segment.belongsTo(User, {
  foreignKey: 'createdBy',
  as: 'creator',
});

UserCommission.belongsTo(User, {
  foreignKey: 'agentId',
  as: 'agent',
});

UserCommission.belongsTo(User, {
  foreignKey: 'createdBy',
  as: 'creator',
});

Commission.belongsTo(Segment, {
  foreignKey: 'segmentId',
  as: 'segment',
});

UserCommission.hasMany(Commission);
Commission.belongsTo(UserCommission);

Fees.belongsTo(User, {
  foreignKey: 'createdBy',
  as: 'creator',
});

Application.belongsTo(User, {
  foreignKey: 'createdBy',
  as: 'creator',
});

Provider.belongsTo(User, {
  foreignKey: 'createdBy',
  as: 'creator',
});

ProviderCommission.belongsTo(Provider, {
  foreignKey: 'providerId',
  as: 'provider',
});

ProviderCommission.belongsTo(User, {
  foreignKey: 'createdBy',
  as: 'creator',
});

AgentTreasury.belongsTo(User, {
  foreignKey: 'createdBy',
  as: 'creator',
});

ProviderTreasury.belongsTo(User, {
  foreignKey: 'createdBy',
  as: 'creator',
});

AddionalTreasury.belongsTo(User, {
  foreignKey: 'createdBy',
  as: 'creator',
});

app.use('/api', routes);

app.use('*', (req, res, next) => {
  next(new ApiError("cann't find this endpoint"));
});
app.use(errorHandler);

const PORT = process.env.PORT || 3000;

sequelize
  .sync()
  .then((result) => {
    app.listen(PORT);
  })
  .catch((err) => console.log(err));
